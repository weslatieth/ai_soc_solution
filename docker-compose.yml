version: '3.8'

networks:
  soc_network:
    driver: bridge

volumes:
  elasticsearch_data:
  wazuh_data:
  thehive_data:
  cortex_data:
  grafana_data:
  shuffle_data:

services:
  # Couche de Collecte de Données
  suricata:
    image: jasonish/suricata:latest
    container_name: suricata
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - SYS_NICE
      - NET_RAW
    volumes:
      - ./suricata/config:/etc/suricata
      - ./suricata/data:/var/log/suricata
      - ./shared-data:/shared-data
    command: -i eth0 -v

  zeek:
    image: zeekurity/zeek:latest
    container_name: zeek
    restart: unless-stopped
    network_mode: "host"
    volumes:
      - ./zeek/config:/opt/zeek/etc
      - ./zeek/data:/opt/zeek/logs
      - ./shared-data:/shared-data
    command: -i eth0

  wazuh-manager:
    image: wazuh/wazuh-manager:latest
    container_name: wazuh-manager
    restart: unless-stopped
    ports:
      - "1514:1514/udp"
      - "1515:1515"
      - "514:514/udp"
      - "55000:55000"
    volumes:
      - wazuh_data:/var/ossec/data
      - ./wazuh/config:/var/ossec/etc
      - ./shared-data:/shared-data
    networks:
      - soc_network

  # Couche d'Ingestion et Normalisation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=soc-elastic
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elastic/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
    networks:
      - soc_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
    volumes:
      - ./elastic/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - soc_network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.0
    container_name: filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./elastic/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./suricata/data:/suricata_logs:ro
      - ./zeek/data:/zeek_logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: filebeat -e -strict.perms=false
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - soc_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    container_name: logstash
    restart: unless-stopped
    volumes:
      - ./elastic/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elastic/config/pipelines:/usr/share/logstash/config/pipelines:ro
    ports:
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    depends_on:
      - elasticsearch
    networks:
      - soc_network

  # Couche d'Analyse et Détection IA
  tensorflow-serving:
    image: tensorflow/serving:latest
    container_name: tensorflow-serving
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - ./tensorflow/models:/models
    environment:
      - MODEL_NAME=anomaly_detection
    networks:
      - soc_network

  jupyter-tensorflow:
    image: jupyter/tensorflow-notebook:latest
    container_name: jupyter-tensorflow
    restart: unless-stopped
    ports:
      - "8888:8888"
    volumes:
      - ./tensorflow/notebooks:/home/jovyan/work
      - ./shared-data:/shared-data
    networks:
      - soc_network

  # Couche SOC N0 (Triage Automatisé)
  shuffle-backend:
    image: ghcr.io/shuffle/shuffle-backend:latest
    container_name: shuffle-backend
    restart: unless-stopped
    environment:
      - DATASTORE_EMULATOR_HOST=shuffle-database:8000
      - SHUFFLE_APP_HOTLOAD_FOLDER=./shuffle/apps
      - SHUFFLE_FILE_LOCATION=./shuffle/files
    volumes:
      - ./shuffle/config:/shuffle-config
      - ./shuffle/data:/shuffle-data
      - shuffle_data:/shuffle
    ports:
      - "5001:5001"
    networks:
      - soc_network

  shuffle-frontend:
    image: ghcr.io/shuffle/shuffle-frontend:latest
    container_name: shuffle-frontend
    restart: unless-stopped
    environment:
      - BACKEND_HOSTNAME=shuffle-backend
    ports:
      - "3001:3001"
    networks:
      - soc_network
    depends_on:
      - shuffle-backend

  shuffle-database:
    image: ghcr.io/shuffle/shuffle-database:latest
    container_name: shuffle-database
    restart: unless-stopped
    volumes:
      - ./shuffle/data/database:/shuffle-database
    networks:
      - soc_network

  # Couche d'Orchestration et Réponse
  cassandra:
    image: cassandra:4
    container_name: cassandra
    restart: unless-stopped
    environment:
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=300M
    volumes:
      - ./thehive/data/cassandra:/var/lib/cassandra
    networks:
      - soc_network

  thehive:
    image: strangebee/thehive:latest
    container_name: thehive
    restart: unless-stopped
    depends_on:
      - cassandra
      - elasticsearch
    ports:
      - "9000:9000"
    environment:
      - CQL_HOSTNAMES=cassandra
      - ELASTICSEARCH_HOSTNAMES=elasticsearch
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
    volumes:
      - ./thehive/config:/etc/thehive
      - thehive_data:/opt/thp/thehive/data
    networks:
      - soc_network

  cortex:
    image: thehiveproject/cortex:latest
    container_name: cortex
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - "9001:9001"
    volumes:
      - ./cortex/config:/etc/cortex
      - cortex_data:/opt/cortex/data
    networks:
      - soc_network

  # Couche Interface et Collaboration
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=changeme
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/config:/etc/grafana
      - grafana_data:/var/lib/grafana
    networks:
      - soc_network

  # Couche Simulation et Tests
  caldera:
    image: mitre/caldera:latest
    container_name: caldera
    restart: unless-stopped
    ports:
      - "8888:8888"
    volumes:
      - ./caldera/config:/opt/caldera/conf
      - ./caldera/data:/opt/caldera/data
    networks:
      - soc_network
